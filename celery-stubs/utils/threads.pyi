import threading
from collections.abc import Generator, Iterator
from threading import Thread
from threading import get_ident as get_ident
from typing import Any, Generic, TypeVar

_T = TypeVar("_T")

def default_socket_timeout(timeout: float | None) -> Generator[None, None, None]: ...

class bgThread(Thread):
    daemon: bool
    name: str
    def __init__(self, name: str | None = ..., **kwargs: Any) -> None: ...
    def body(self) -> None: ...
    def on_crash(self, msg: Any, *fmt: Any, **kwargs: Any) -> None: ...
    def run(self) -> None: ...
    def stop(self) -> None: ...

class Local:
    def __init__(self) -> None: ...
    def __iter__(self) -> Iterator[tuple[str, Any]]: ...
    def __call__(self, proxy: Any) -> Any: ...
    def __release_local__(self) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __delattr__(self, name: str) -> None: ...

class _LocalStack(Generic[_T]):
    def __init__(self) -> None: ...
    def __release_local__(self) -> None: ...
    def __call__(self) -> Any: ...
    def push(self, obj: _T) -> list[_T]: ...
    def pop(self) -> _T: ...
    def __len__(self) -> int: ...
    @property
    def stack(self) -> list[_T]: ...
    @property
    def top(self) -> _T: ...

class LocalManager:
    locals: Any
    ident_func: Any
    def __init__(
        self, locals: Any | None = ..., ident_func: Any | None = ...
    ) -> None: ...
    def get_ident(self) -> int: ...
    def cleanup(self) -> None: ...

class _FastLocalStack(threading.local, Generic[_T]):
    stack: list[_T]
    def push(self, obj: _T) -> None: ...
    def pop(self) -> _T: ...
    def __init__(self) -> None: ...
    @property
    def top(self) -> _T: ...
    def __len__(self) -> int: ...

LocalStack: type[_FastLocalStack[Any]] | type[_LocalStack[Any]]
