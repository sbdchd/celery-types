import shelve
from threading import Thread
from typing import NamedTuple

from billiard.context import Process

__all__ = [
    "SchedulingError",
    "ScheduleEntry",
    "Scheduler",
    "PersistentScheduler",
    "Service",
]

class event_t(NamedTuple): ...
class SchedulingError(Exception): ...
class BeatLazyFunc: ...

class ScheduleEntry:
    total_run_count: int

class Scheduler:
    Entry = ScheduleEntry
    def setup_schedule(self) -> None: ...
    def sync(self) -> None: ...
    def close(self) -> None: ...

class PersistentScheduler(Scheduler):
    persistence = shelve
    def setup_schedule(self) -> None: ...
    def sync(self) -> None: ...
    def close(self) -> None: ...

class Service:
    scheduler_cls = PersistentScheduler
    def start(self, embedded_process: bool = ...) -> None: ...
    def sync(self) -> None: ...
    def stop(self, wait: bool = ...) -> None: ...

class _Threaded(Thread):
    daemon: bool
    name: str
    def run(self) -> None: ...
    def stop(self) -> None: ...

class _Process(Process):
    name: str
    def run(self) -> None: ...
    def stop(self) -> None: ...
